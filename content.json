{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"keyword_extraction","slug":"keyword-extraction","date":"2021-01-12T06:14:54.000Z","updated":"2021-01-12T12:02:45.233Z","comments":true,"path":"2021/01/12/keyword-extraction/","link":"","permalink":"http://example.com/2021/01/12/keyword-extraction/","excerpt":"","text":"关键词提取简介关键字提取(又称关键字检测或关键字分析)是一种文本分析技术，可以自动从文本中提取最常用、最重要的单词和表达式，它有助于总结文本内容和识别讨论的主要话题。 文本分析使用带有自然语言处理(NLP)的机器学习人工智能(AI)来分解人类语言，使其能够被机器理解和分析。关键字分析可以从各种文本中找到关键字：常规文件和商业报告，社交媒体评论，在线论坛和评论，新闻报道，等等。假设您想分析关于您的产品的数千条在线评论。关键字提取可以帮助您筛选整个数据集，并在几秒钟内获得最适合描述每个评论的词。通过这种方式，您可以很容易地自动地看到您的客户最经常提到的内容，从而为您的团队节省数小时的手工处理时间。 有一些免费的词云生成器可以比较直观地体现关键词，例如Word clouds。 方法 Simple Statistical Approaches 主要包括词频、词搭配和共现、TF-IDF(术语频率反向文档频率的缩写)和RAKE(快速自动关键字提取)，基于统计的方法只依赖于统计数据，可能会忽略那些只被提到一次但仍然应该被认为是相关的相关单词或短语。 1、词频 词频包括列出在一篇文章中重复次数最多的单词和短语。这对于很多目的都很有用，从在一组产品评审中识别反复出现的术语，到发现客户支持交互中最常见的问题。然而，词频方法认为文档只是一个“单词袋”，而不考虑与含义、结构、语法和单词序列相关的关键方面。例如，这种关键字提取方法无法检测到同义词，从而忽略了非常有价值的信息。 2、单词搭配和共现 也被称为N-gram统计，单词搭配和共现有助于理解文本的语义结构，并将多个单词算作一个单词。搭配是指经常放在一起的词。最常见的搭配类型是bi-grams(两个相邻的词，如“客户服务”、“视频电话”或“电子邮件通知”)和trig(三个词组成的组，如“易于使用”或“社交媒体渠道”)。另一方面，共现现象是指在同一语料库中倾向于共现的单词。它们不一定是相邻的，但它们在语义上确实具有相似性。 3、TF-IDF TF-IDF表示词频-逆文档频率，用来衡量文档集合中一个单词对文档的重要性。该度量计算单词在文本中出现的次数(术语频率)，并将其与逆向文档频率(该单词在整个数据集中的罕见或常见程度)进行比较，将这两个量相乘就提供了文档中单词的TF-IDF分数。分数越高，这个词就越与文档相关。当涉及到关键字提取时，这个指标可以帮助您识别文档中最相关的词(得分较高的词)，并将它们视为关键词。 4、RAKE 快速自动关键字提取(RAKE)是一种著名的关键字提取方法，它使用stopwords和短语分隔符列表来检测一段文本中最相关的单词或短语，以以下文本为例:Keyword extraction is not that difficult after all. There are many libraries that can help you with keyword extraction. Rapid automatic keyword extraction is one of those.该方法所做的第一件事是将文本拆分为一个单词列表，并从该列表中删除stopwords。这将返回一个所谓内容词的列表。假设我们的stopwords和短语分隔符列表如下:stopwords = [is, not, that, there, are, can, you, with, of, those, after, all, one] 分隔符=[., ,]然后，我们的8个内容词的列表将像这样:content_words =[keyword, extraction, difficult, many, libraries, help, rapid, automatic]然后，该算法以短语分隔符和停止词分隔文本，以创建候选表达式。所以，候选人的关键短语如下:Keyword extraction is not that difficult after all. There are many libraries that can help you with keyword extraction. Rapid automatic keyword extraction is one of those.一旦文本被分割，该算法就会创建一个单词共现矩阵。每一行显示一个给定的内容词与候选短语中每个其他内容词共现的次数。对于上面的例子，矩阵看起来像这样: 在这个矩阵建立之后，单词会得到一个分数。这一点可以计算为一个词的程度在矩阵(即共生的数量的总和词与其他词在文本内容),随着词频的次数(即这个词出现在文本),或作为其频率除以这个词的程度。如果我们计算每个单词的学位分数除以频率分数，它们看起来会像这样: 这些表达式也会给出一个分数，这个分数是每个单词的分数之和。如果我们要计算上面粗体部分的得分，它们会是这样的: 如果两个关键字或关键字短语以相同的顺序同时出现两次以上，不管关键字短语在原始文本中包含多少stopwords，都会创建一个新的关键字短语。该关键字的得分计算方式与单个关键字的得分计算方式相同。如果一个关键字或关键字短语的分数属于top T分数，其中T是您想要提取的关键字的数目，则选择该关键字或关键字短语。根据原始论文，T默认了文件中三分之一的内容词。对于上面的示例，该方法将返回前3个关键字，根据我们定义的分数，这将是rapid automatic keyword extraction(13.33)、keyword extraction(5.33)和many libraries(4.0)。 语言学方法 关键词提取方法通常利用关于文本及其包含的单词的语言信息。有时，使用词法或句法信息(例如单词的词性或句子的依赖语法表示中单词之间的关系)来确定应该提取哪些关键字。在某些情况下，某些PoS会得到更高的分数(例如名词和名词短语)，因为它们通常比其他类别包含更多关于文本的信息。 图论方法 基于图的关键字提取的基本思想总是相同的:根据从图的结构中获取的一些信息来度量顶点的重要性，从而提取最重要的顶点。一旦建立了一个图，就该确定如何度量顶点的重要性了。有许多不同的选择，其中大部分在本文中处理。有些方法选择测量顶点的度数。顶点的度等于边的数量或连接顶点的土地(也称为度)+边的数量开始的顶点(也称为度)除以最大度(=图的顶点数- 1)。这个公式来计算一个顶点的度: Dv = (Dvin + Dvout) / (N - 1) 其他一些方法测量到一个给定顶点的直接顶点的数量(称为邻域大小)。 无论选择的度量是什么，每个顶点都会有一个分数，它将决定是否将其作为关键字提取。以以下文本为例:Automatic1 graph-based2 keyword3 extraction4 is pretty5 straightforward6. A document7 is represented8 as a graph9 and a score10 is given11 to each of the vertices12 in the graph13. Depending14 on the score15 of a vertex16, it might be chosen17 as a keyword18.如果我们衡量社区大小上面的示例图的依赖性只包含有实词(编号1 - 18在文本),提取的关键词会被自动等基于关键字提取自附近的大小头名词提取(等于3/17)是最高的。 机器学习方法 1、条件随机域条件随机场(CRF)是一种统计方法，通过对文本中出现的单词序列的不同特征进行加权来学习模式。这种方法考虑上下文和不同变量之间的关系，以便作出预测。使用条件随机场允许您创建复杂和丰富的模式。这种方法的另一个优点是它的泛化能力:一旦模型用某个领域的例子进行了训练，它就可以很容易地将它所学到的知识应用到其他领域。缺点是，为了使用条件随机场，您需要有很强的计算能力来计算所有单词序列的所有特征的权重。 评估关键字提取器的性能在评估关键字提取器的性能时，您可以使用机器学习中的一些标准指标:准确性、精度、召回率和F1分数。然而，这些指标并不能反映部分匹配;他们只考虑所提取的片段与该标记的正确预测之间的完美匹配。幸运的是，还有一些其他指标能够捕获部分匹配。一个例子就是ROUGE。ROUGE(面向回忆的基sting评价替补研究)是一组比较源文本和提取词之间不同参数(如重叠词的数量)的指标。参数包括序列的长度和数目，可以手动定义。 混合方法 混合之前的方法。","categories":[],"tags":[{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"}]},{"title":"nlp工具总结","slug":"nlp工具总结","date":"2021-01-12T02:44:43.000Z","updated":"2021-01-12T06:06:38.717Z","comments":true,"path":"2021/01/12/nlp工具总结/","link":"","permalink":"http://example.com/2021/01/12/nlp%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/","excerpt":"","text":"NLP工具总结 MonkeyLearn相关解决方案","categories":[],"tags":[]},{"title":"mysql使用总结","slug":"mysql使用总结","date":"2021-01-12T02:29:10.000Z","updated":"2021-01-12T02:40:48.709Z","comments":true,"path":"2021/01/12/mysql使用总结/","link":"","permalink":"http://example.com/2021/01/12/mysql%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"MySQL使用总结","categories":[],"tags":[]},{"title":"rust使用总结","slug":"rust使用总结","date":"2021-01-11T15:03:15.000Z","updated":"2021-01-11T15:15:39.229Z","comments":true,"path":"2021/01/11/rust使用总结/","link":"","permalink":"http://example.com/2021/01/11/rust%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"rust使用总结 Rust Report Card - 为你的 Rust 代码生成质量报告 简介： 官网https://rust-reportcard.xuri.me，Rust Report Card 服务，通过近 500 个代码检测项帮助分析你的 Rust 代码中的潜在质量问题，还可获得 badge 徽章。 该服务基于 rust-clippy 中 定义的 lint 规则对 Rust 进行静态代码分析扫描，在 Rust 编译器检查的基础之上帮你更进一步，编写出更好的代码，检查内容涵盖可优化性能写法、可简化代码写法、代码惯用风格更符合最佳实践、未使用变量和 cargo 声明文件检查等。 Rust Report Card 提供了增量代码扫描、代码质量评级、徽章生成、协议检查和内部开源 Rust 代码质量评分排行等功能。 代码质量评级与得分规则： 3+ 评级 得分 Badge A+ &gt; 90 A &gt; 80 B &gt; 70 C &gt; 60 D &gt; 50 E &gt; 40 F &lt;= 40","categories":[],"tags":[]},{"title":"typescript使用总结","slug":"typescript使用总结","date":"2021-01-11T13:46:51.000Z","updated":"2021-01-11T15:00:26.947Z","comments":true,"path":"2021/01/11/typescript使用总结/","link":"","permalink":"http://example.com/2021/01/11/typescript%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"Type Script使用总结 安装typescript 12sudo apt install npmsudo npm install -g typescript 通过tsc命令确认安装完成 1tsc -v 运行ts文件 12tsc ***.ts &#x2F;&#x2F; 得到***.js文件node ***.js &#x2F;&#x2F; 使用node命令执行js文件 运行ts文件出现以下错误 1Cannot find module &#39;fs&#39; 执行以下命令： 1sudo npm install @types&#x2F;node","categories":[],"tags":[]},{"title":"python使用总结","slug":"python使用总结","date":"2021-01-09T14:20:08.000Z","updated":"2021-01-10T02:41:06.851Z","comments":true,"path":"2021/01/09/python使用总结/","link":"","permalink":"http://example.com/2021/01/09/python%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"python使用总结 python执行ubuntu terminal命令 12import os os.system(&#39;&lt;ubuntu 命令&gt;&#39;) 在执行ubuntu terminal命令时，如果需要切换路径： 1os.chdir(&#39;&lt;路径名称&gt;&#39;)","categories":[],"tags":[]},{"title":"ubuntu使用总结","slug":"ubuntu使用总结","date":"2021-01-09T08:21:12.000Z","updated":"2021-01-10T02:44:46.361Z","comments":true,"path":"2021/01/09/ubuntu使用总结/","link":"","permalink":"http://example.com/2021/01/09/ubuntu%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"ubuntu 使用总结 ubuntu查看环境变量有三个命令 1、env env命令是environment的缩zhi写，用dao于列出所zhuan有的环境变量 2、export 单独使用export命令也可以像env列出所有的环境变量，不过export命令还有其他额外的功能 3、echo $PATH echo $PATH用于列出变量PATH的值，里面包含了已添加的目录 ubuntu修改环境变量： 1、使用set命令 set查看所有本地定义的环境变量，unset可以删除指定的环境变量。 2、使用export命令 export &lt;变量名称&gt;=$&lt;变量名称&gt;:&lt;变量值&gt; //等号两边一定不能有空格 3、修改.bashrc文件 12345vi ~&#x2F;.bashrc &#x2F;&#x2F;编辑.bashrc文件 &#x2F;&#x2F;在最后一行添上: export &lt;变量名称&gt;&#x3D;$&lt;变量名称&gt;:&lt;变量值&gt; &#x2F;&#x2F;等号两边没空格 &#x2F;&#x2F;保存退出source ~&#x2F;.bashrc 注意，常用的环境变量： PATH 决定了shell将到哪些目录中寻找命令或程序 HOME 当前用户主目录 HISTSIZE 历史记录数 LOGNAME 当前用户的登录名 HOSTNAME 指主机的名称 SHELL 当前用户Shell类型 LANGUGE 语言相关的环境变量，多语言可以修改此环境变量 MAIL 当前用户的邮件存放目录 PS1 基本提示符，对于root用户是#，对于普通用户是$ ubuntu中&gt;和&gt;&gt;和&lt;的区别 1、输入输出的区bai别： &gt;&gt;和&gt;都属于输出重定向，&lt;属于输入重定向。 2、文件内容的区别： &gt;会覆盖目标的原有内容。当文件存在时会先删除原文件，再重新创建文件，然后把内容写入该文件；否则直接创建文件。 &gt;&gt;会在目标原有内容后追加内容。当文件存在时直接在文件末尾进行内容追加，不会删除原文件；否则直接创建文件。","categories":[],"tags":[]},{"title":"git使用总结","slug":"git使用总结","date":"2021-01-09T08:18:40.000Z","updated":"2021-01-10T12:31:23.446Z","comments":true,"path":"2021/01/09/git使用总结/","link":"","permalink":"http://example.com/2021/01/09/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"git 使用总结 git log --stat的使用 1、显示最近一次被修改文件的修改：统计信息，添加或删除了多少行。 git log -1 --stat 2、显示最近两条的修改 git log --stat -2 3、显示具体的修改 git log -p -2 4、显示用户为czd的修改 git log --stat --author=czd 5、查看单个文件sensor-dev.c最近三次修改的记录 git log --stat -3 drivers/input/sensors/sensor-dev.c 6、如果想不分页输出全部log日志 git --no-pager log 当使用git --no-pager log --stat &gt;&gt; temp.txt出现以下报错信息时： 12warning: inexact rename detection was skipped due to too many files.warning: you may want to set your diff.renameLimit variable to at least 6567 and retry the command. 修改git的diff.renameLimit变量值 1git config diff.renameLimit 2000000 github api使用总结 1、得到某个仓库的贡献者 1api.github.com&#x2F;repos&#x2F;&lt;项目所属组织或个人&gt;&#x2F;&lt;项目名称&gt;&#x2F;contributors 返回的json中contributions即为commit次数。 2、得到某一用户在github上面贡献了多少库 benjycui编写了一个实现该功能的工具。","categories":[],"tags":[]},{"title":"ubuntu服务器-Nginx初步配置及站点部署","slug":"ubuntu服务器-Nginx初步配置及站点部署","date":"2021-01-08T01:51:13.000Z","updated":"2021-01-08T02:11:46.155Z","comments":true,"path":"2021/01/08/ubuntu服务器-Nginx初步配置及站点部署/","link":"","permalink":"http://example.com/2021/01/08/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%AB%99%E7%82%B9%E9%83%A8%E7%BD%B2/","excerpt":"","text":"ubuntu服务器-Nginx初步配置及站点部署 使用SSH远程登录服务器 1ssh root@***.***.***.*** 安装Nginx并启动服务器 123apt updateapt install nginxsystemctl start nginx 将项目上传到服务器 可以选择本地上传或者 github clone。 编辑默认的default root /var默认路径，并将代码移动至路径下。 12345cd &#x2F;etc&#x2F;nginx&#x2F;sites-availablevim default(rewrite) root &#x2F;var&#x2F;www&#x2F;sitescd &#x2F;var&#x2F;wwwmv &lt;code path&gt; sites 检测nginx配置文件，重启nginx服务器 12nginx -tservice nginx restart","categories":[],"tags":[]},{"title":"基于Github和Hexo搭建个人网站","slug":"website-based-github-hexo","date":"2021-01-06T12:13:18.000Z","updated":"2021-01-07T02:19:57.950Z","comments":true,"path":"2021/01/06/website-based-github-hexo/","link":"","permalink":"http://example.com/2021/01/06/website-based-github-hexo/","excerpt":"","text":"基于Github和Hexo搭建个人网站 安装并配置 Git Git 是目前世界上最先进的分布式版本控制系统（没有之一）,使用 Git 的目的是为了将网站从本地提交上服务器（GitHub）上面去。具体的 Git 操作细节可以查看廖雪峰的教程，讲的十分详细。 在终端进行操作，设置 user.name 和 user.email 配置信息，为了方便推荐设置为全局。 12git config --global user.name &quot;GitHub账号名称&quot;git config --global user.email &quot;GitHub注册邮箱&quot; ** 通过注册的邮箱生成 ssh 密钥文件： 1ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot; 直接三个回车，默认不需要设置密码。最后得到了两个文件： id_rsa 和 id_rsa.pub。打开 id_rsa.pub 文件，将里面的内容全部复制到 Github 上。添加 SSH key 后，进行测试。 1ssh -T git@github.com 你将会看到： 123The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes&#x2F;no)? 选择yes后 1Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 新建一个 Github 仓库，仓库名为：&lt;github账号名称&gt;.github.io 安装Node.js可以根据自己的系统自行搜索安装方法，ubuntu 上的安装方法为：1sudo apt-get install nodejs 安装并配置 Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1sudo npm install -g hexo-cli 初始化博客 1hexo init myBlog 进入myBlog文件夹中，输入 1hexo server 或者1hexo s 打开浏览器输入地址：1localhost:4000 这样就可以看见博客了。 添加文章(1) 可以将你平时写的文章直接导入到 _posts 文件夹里，注意文章类型得是 md 格式。(2) 可以写新文章，执行以下命令 1hexo new [layout] &lt;title&gt; 可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 生成静态网页 1hexo generate 或者1hexo g 将网页部署到 Github 上Hexo 提供了快速方便的一键部署功能，只需一条命令就能将网站部署到服务器上。在开始之前，必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如：1234deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;***&#x2F;***.github.io branch: master 之后输入以下命令：1hexo deploy 或者1hexo d 稍等片刻，网站就已经部署好了，可以在浏览器输入 ***.github.io，这样一个免费的博客就已经搭建好了。 选择主题Hexo 默认的主题比较一般，可以在Hexo的主题网站进行主题的挑选更换。将下好的主题安放在themes文件夹内，同时在_config.yml中进行主题修改就好了。一般每个主题都会有比较详细的说明文档，按照文档进行修改即可。","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"}]}